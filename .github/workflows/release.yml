name: Create Github Release

on:
  push:
    branches:
      - main

jobs:
  CheckVersion:
    runs-on: ubuntu-latest
    outputs:
      versionChanged: ${{ steps.check_version.outputs.changed }}
      newVersion: ${{ steps.check_version.outputs.newVersion }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Check if version has been updated
        id: check_version
        run: |
          git checkout ${{ github.event.before }}
          OLD_VERSION=$(python -c "from main import __version__; print(__version__)")
          git checkout ${{ github.sha }}
          NEW_VERSION=$(python -c "from main import __version__; print(__version__)")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          if [ "$OLD_VERSION" != "$NEW_VERSION" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "newVersion=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi

  CreateRelease:
    needs: CheckVersion
    if: needs.CheckVersion.outputs.versionChanged == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Set up Git repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Build Executable
        run: pyinstaller --onefile --name=RandomR6 --icon=R6S.ico main.py

      - name: Create Release notes
        run: |
          echo "## What's Changed
          
          " > CHANGELOG.md
          LAST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          git log --pretty=format:'* %s' $LAST_TAG..HEAD >> CHANGELOG.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.CheckVersion.outputs.newVersion }}
          name: v${{ needs.CheckVersion.outputs.newVersion }}
          files: dist/RandomR6.exe
          body_path: CHANGELOG.md